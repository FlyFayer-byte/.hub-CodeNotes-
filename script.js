let lastDatabaseState = []; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω –±–∞–∑–∏

// ‚ö° –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É LocalStorage
function saveToLocalStorage(data) {
    localStorage.setItem('codeNotesDB', JSON.stringify(data));
}

// ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ LocalStorage
function loadFromLocalStorage() {
    const savedDB = localStorage.getItem('codeNotesDB');
    return savedDB ? JSON.parse(savedDB) : [];
}

// ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
async function loadEntries() {
    try {
        const response = await fetch('http://localhost:5000/api/get-entries');
        const data = await response.json();

        const table = document.querySelector("#dbTable");
        const tbody = document.querySelector("#dbTable tbody");

        if (!table || !tbody) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ DOM! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ `db.html` –º—ñ—Å—Ç–∏—Ç—å <table id='dbTable'>.");
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–∞–∑–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
        if (JSON.stringify(data) !== JSON.stringify(lastDatabaseState)) {
            lastDatabaseState = data; // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–∞–∑–∏
            tbody.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º

            data.forEach(entry => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'type')">${entry.type}</td>
                    <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'name')">${entry.name}</td>
                    <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'description')">${entry.description}</td>
                    <td>
                        <button class="btn-edit" onclick="editEntry(${entry.id})">‚úèÔ∏è</button>
                        <button class="btn-delete" onclick="deleteEntry(${entry.id})">üóëÔ∏è</button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            saveToLocalStorage(data); // –û–Ω–æ–≤–ª—é—î–º–æ LocalStorage
            console.log("‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ.");
        } else {
            console.log("üîπ –î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.");
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        lastDatabaseState = loadFromLocalStorage(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ LocalStorage –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Å–µ—Ä–≤–µ—Ä–∞
    }
}

// ‚ö° –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏
function updateEntry(id, element, field) {
    const newValue = element.innerText.trim();
    
    fetch(`http://localhost:5000/api/edit-entry/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ [field]: newValue })
    }).then(() => console.log(`‚úÖ –ü–æ–ª–µ ${field} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ID ${id}`));
}

// ‚ö° –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
function addEntry() {
    const type = prompt("–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø (HTML/CSS/JavaScript)");
    const name = prompt("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É");
    const description = prompt("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å");

    if (!type || !name || !description) {
        alert("‚ùå –í—Å—ñ –ø–æ–ª—è –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!");
        return;
    }

    fetch('http://localhost:5000/api/add-entry', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type, name, description })
    }).then(() => loadEntries()); // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω
}

// ‚ö° –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
function deleteEntry(id) {
    if (!confirm("‚ö† –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?")) {
        return;
    }

    fetch(`http://localhost:5000/api/delete-entry/${id}`, {
        method: 'DELETE'
    }).then(() => loadEntries()); // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω
}

// ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
    if (document.querySelector("#dbTable")) {
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü—è –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ–Ω—É—î–º–æ loadEntries()");
        loadEntries();
    } else {
        console.log("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ, loadEntries() –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.");
    }
});
