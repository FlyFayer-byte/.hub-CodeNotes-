let lastDatabaseState = []; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω –±–∞–∑–∏

// ‚ö° –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É LocalStorage
function saveToLocalStorage(data) {
    localStorage.setItem('codeNotesDB', JSON.stringify(data));
}

// ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ LocalStorage
function loadFromLocalStorage() {
    const savedDB = localStorage.getItem('codeNotesDB');
    return savedDB ? JSON.parse(savedDB) : [];
}

// ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
async function loadEntries() {
    try {
        const response = await fetch('http://localhost:5000/api/get-entries');
        const data = await response.json();

        console.log("‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:", data);

        const tbody = document.querySelector("#dbTable tbody");
        tbody.innerHTML = "";
        
        data.forEach(entry => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'type')">${entry.type}</td>
                <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'name')">${entry.name}</td>
                <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'description')">${entry.description}</td>
                <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'category')">${entry.category}</td>
                <td contenteditable="true" onBlur="updateEntry(${entry.id}, this, 'example_code')"><pre>${entry.example_code}</pre></td>
                <td>
                    <button onclick="editEntry(${entry.id})">‚úèÔ∏è</button>
                    <button onclick="deleteEntry(${entry.id})">üóëÔ∏è</button>
                </td>
            `;
            tbody.appendChild(row);
        });

        console.log("‚úÖ –¢–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–∞.");
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
    }
}




// ‚ö° –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏
function updateEntry(id, element, field) {
    const newValue = element.innerText.trim();

    fetch(`http://localhost:5000/api/edit-entry/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ [field]: newValue })
    }).then(() => {
        console.log(`‚úÖ –ü–æ–ª–µ ${field} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ID ${id}`);
        loadEntries(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    });
}


// ‚ö° –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
function addEntry() {
    const type = document.getElementById("entryType").value;
    const name = document.getElementById("entryName").value.trim();
    const description = document.getElementById("entryDescription").value.trim();
    const category = document.getElementById("entryCategory").value.trim();
    const example_code = document.getElementById("entryExample").value.trim();

    console.log("üìù –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ:", { type, name, description, category, example_code });

    if (!type || !name || !description || !category || !example_code) {
        alert("‚ùå –í—Å—ñ –ø–æ–ª—è –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!");
        return;
    }

    fetch('http://localhost:5000/api/add-entry', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type, name, description, category, example_code })
    }).then(() => 
        loadEntries()); // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω
}




// ‚ö° –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
function deleteEntry(id) {
    if (!confirm("‚ö† –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?")) {
        return;
    }

    fetch(`http://localhost:5000/api/delete-entry/${id}`, {
        method: 'DELETE'
    }).then(() => loadEntries()); // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω
}

// ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
    if (document.querySelector("#dbTable")) {
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü—è –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ–Ω—É—î–º–æ loadEntries()");
        loadEntries();
    } else {
        console.log("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ, loadEntries() –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.");
    }
});

// (–î–æ–¥–∞—î –∞–≤—Ç–æ–ø—ñ–¥–∫–∞–∑–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—à—É–∫—É)

document.getElementById("searchInput").addEventListener("input", async function() {
    const query = this.value;
    if (query.length < 2) return;
    
    const response = await fetch(`/api/search?q=${query}`);
    const suggestions = await response.json();
    console.log("üîç –ê–≤—Ç–æ–ø—ñ–¥–∫–∞–∑–∫–∏:", suggestions);
});